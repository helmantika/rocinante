<?php

namespace rocinante\domain\model;

/**
 * Domain defines an interface to represent real-world participants of this system.
 */
abstract class Domain
{

   /**
    * The field names of the object and their values.
    * @var array
    */
   protected $fields = array();

   /**
    * The object field types. Types are identified by means of a character: i (integer), d (double),
    * s (string), and b (blob).
    * @var array
    */
   protected $types = array();

   /**
    * Constructs a new domain object.
    * @param array $fields The field names of the object.
    */
   public function __construct(array $fields)
   {
      $this->types = $fields;
      $this->fields = \array_fill_keys(\array_keys($fields), null);
   }

   /**
    * Sets a value for a field name.
    * @param string $field A field name.
    * @param mixed $value A field value.
    * @throws \Exception Field is not defined.
    */
   public function set($field, $value)
   {
      if (!\array_key_exists($field, $this->fields))
      {
         throw new \Exception("Field $field is not defined for this domain object");
      }
      $this->fields[$field] = $value;
   }

   /**
    * Gets the value of a field name.
    * @param string $field A field name.
    * @return mixed A field value.
    * @throws \Exception Field is not defined.
    */
   public function get($field)
   {
      if (!\array_key_exists($field, $this->fields))
      {
         throw new \Exception("Field $field is not defined for this domain object");
      }
      return $this->fields[$field];
   }

   /**
    * Defines whether a field name is defined for this domain object.
    * @param string $field A field name.
    * @return bool true or false.
    */
   public function exists($field)
   {
      return \array_key_exists($field, $this->fields);
   }
   
   /**
    * Populates this domain object.
    * @param array $array An associative array whose keys are field names and values are field values.
    */
   public function populate(array $array)
   {
      foreach ($array as $field => $value)
      {
         $this->set($field, $value);
      }
   }

   /**
    * Sets a univocal ID for this object generated by the database because the ID field has the AUTO
    * INCREMENT attribute.
    */
   public function setLastInsertId($value)
   {
      // To be overriden by subclasses.
   }

   /**
    * Gets the field names of this domain object.
    * @return array The field names of the object.
    */
   public function fields()
   {
      return $this->fields;
   }

   /**
    * Gets the field types of this domain object.
    * @return array The field types of the object.
    */
   public function types()
   {
      return $this->types;
   }

}

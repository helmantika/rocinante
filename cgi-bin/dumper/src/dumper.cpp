/*
 * Translation Add-On Generator CGI program for the web app Rocinante.
 * Copyright (C) 2016 Jorge Rodr√≠guez Santos
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <iostream>
#include <sstream>
#include "LangAnalyzer.hpp"
#include "LuaAnalyzer.hpp"

/**
 * This C++ CGI program generates 2 files that will be used by Rocinante to setup the database.
 *
 * Those files are the following ones:
 * a) new_lang_records.tmp stores records from two xx.lang files.
 * b) new_lua_records.tmp stores records from tow xx_client.lua and tow xx_pregame.lua files.
 *
 * This program needs four input arguments:
 *    1. dir, a directory where ESO files are.
 *    2. baselang, a two letter code that stands for an official ESO language (fr, en, de).
 *    3. extralang, a two letter code that stands for another official ESO language (fr, en, de).
 *    4. mode, "setup" or "update". The first mode will create queries for Lang and Lua tables;
 *       the second one will do for NewLang and NewLua tables.
 * 
 * Also, if there is a file called target.lang.csv in dir, a file that was generated by 
 * EsoExtractData, it will be taken to insert its strings as translated ones.
 *
 * This program always returns an errorcode. This way Rocinante (web app) knows what happened.
 *
 * Error Codes
 * -----------
 *  1 - INVALID NUMBER OF ARGUMENTS
 *  2 - INVALID DIRECTORY
 *  3 - INVALID OFFICIAL LANGUAGE
 *  8 - INVALID CLIENT AND/OR PREGAME FILE
 *  9 - CANNOT WRITE FILES
 * 10 - SUCCESS (No error)
 * 11 - INVALID MODE
 *
 * Even if this program returns no error, it is not granted that generated files are right because
 * this program needs several input files with a strict structure.
 *
 * Be sure this script can access the specified directories and has permission to read the files.
 */
int main( int argc, char* argv[] )
{
   Util::Error errorcode{Util::Success};

   if (argc != 5)
   {
      errorcode = Util::InvalidNumberOfArguments;
   }
   else
   {
      std::string sourcedir{argv[1]};
      std::string baselang{argv[2]};
      std::string extralang{argv[3]};
      std::string mode{argv[4]};

      if (mode != "setup" && mode != "update")
      {
         errorcode = Util::InvalidMode;
      }
      else if (sourcedir != "./esodata/")
      {
         errorcode = Util::InvalidDirectory;
      }
      else if (baselang != "fr" && baselang != "en" && baselang != "de" &&
               extralang != "fr" && extralang != "en" && extralang != "de" &&
               baselang == extralang)
      {
         errorcode = Util::InvalidOfficialLanguage;
      }
      else
      {
         {
            LangAnalyzer lang(baselang, extralang, sourcedir, mode);
            errorcode = lang.generate();
         }

         if (errorcode == Util::Success)
         {
            LuaAnalyzer lua(baselang, extralang, sourcedir, mode);
            errorcode = lua.generate();
         }
      }
   }

   std::cout << +errorcode << std::endl;
   return errorcode;
}

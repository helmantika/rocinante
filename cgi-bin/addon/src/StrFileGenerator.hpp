/*
 * Translation Add-On Generator CGI program for the web app "Rocinante".
 * Copyright (C) 2016 Jorge Rodríguez Santos
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef STR_FILE_GENERATOR_HPP
#define STR_FILE_GENERATOR_HPP

#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include "Util.hpp"

/**
 * The translation unit data.
 */
struct LuaUnit
{
   /**
    * The identifier.
    */
   std::string id;

   /**
    * The text to be translated.
    */
   std::string text;

   /**
    * The text in the second language.
    */
   std::string text2;

   /**
    * The text version.
    */
   int version;
};

/**
 * Generates «xx_pregame.str» and «xx_client.str» text files for a translation add-on.
 */
class StrFileGenerator
{
public:

   /**
    * Initializes generator to build two text files located at «destdir» based on an official
    * «language» given as two letter code (en, fr, or de) of which file is located at «sourcedir».
    */
   StrFileGenerator(const std::string& language, const std::string& extralang,
                    const std::string& sourcedir, const std::string& destdir);

   /**
    * Creates «xx_pregame.str» and «xx_client.str» text files in «language» given as two letter code
    * (es, ru, it, br, tr, etc).
    *
    * A file called "db_lua.tmp" must be in the directory given to the constructor.
    */
   Util::Error generate(const std::string& language);

private:

   /**
    * Reads a LUA text file and store all the records in «records».
    */
   bool readLuaFile(const std::string& file, std::vector<LuaUnit>& records);

   /**
    * Reads a LUA text file and store all the records in «records».
    */
   bool readLuaFile(const std::string& file, std::map<std::string, LuaUnit>& records);

   /**
    * Reads a translation file generated by Rocinante from its database.
    *
    * The file structure is the following one:
    * {{id,version}}
    * Translated text.
    *
    * Example:
    *
    * {{SI_ABANDON_MAIN_QUEST_FAIL,0}}
    * No puedes abandonar la misión principal.
    *
    * {{SI_ABANDON_QUEST_CONFIRM,0}}
    * Abandonar
    *
    * ...
    */
   bool readTranslationFile(const std::string& file);

   /**
    * Reads a file that contains the header for xx_client.str or xx_pregame.str, and appends it to
    * the stream.
    */
   void processStrHeaderFile(const std::string& file, std::ofstream& ofs);

private:

   /**
    * The official language (two letter code).
    */
   std::string theOfficialLanguage;

   /**
    * The other official language (two letter code).
    */
   std::string theExtraLanguage;

   /**
    * The target language (two letter code).
    */
   std::string theTargetLanguage;

   /**
    * The directory where ESO files are.
    */
   std::string theSourceDir;

   /**
    * The directory where file will be generated.
    */
   std::string theDestDir;

   /**
    * The vector that contains all the records from an official «xx_client.lua» file.
    */
   std::vector<LuaUnit> theClient;

   /**
    * The vector that contains all the records from an official «xx_pregame.lua» file.
    */
   std::vector<LuaUnit> thePregame;

   /**
    * The map that associates a record ID with the new version units.
    */
   std::map<std::string, LuaUnit> theExtraLang;

   /**
    * The map that associates a record ID with its translation.
    */
   std::map<std::string, LuaUnit> theTranslation;
   using UnitIterator = std::map<std::string, LuaUnit>::iterator;
};

#endif

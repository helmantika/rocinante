/*
 * Translation Add-On Generator CGI program for the web app "Rocinante".
 * Copyright (C) 2016 Jorge Rodríguez Santos
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef LANG_FILE_GENERATOR_HPP
#define LANG_FILE_GENERATOR_HPP

#include <fstream>
#include <sstream>
#include <vector>
#include <set>
#include <map>
#include <unordered_map>
#include <netinet/in.h>
#include "Util.hpp"

/**
 * The lang file record structure.
 */
struct Record
{
   /**
    * The table ID.
    */
   unsigned int tableid;

   /**
    * The sequence ID used to link some tables and strings.
    */
   unsigned int seqid;

   /**
    * The string ID.
    */
   unsigned int stringid;

   /**
    * The file offset in bytes from the end of records.
    */
   unsigned int offset;
};

/**
 * The translation unit data.
 */
struct LangUnit
{
   /**
    * The identifiers and offset.
    */
   Record record;

   /**
    * The string.
    */
   std::string text;

   /**
    * A hash key is calculated from the three record identifiers: table, string, and sequence.
    */
   unsigned long long key;

   /**
    * The algorithm internal step.
    */
   int step;
};

/**
 * Generates a «xx.lang» binary file for a translation add-on.
 */
class LangFileGenerator
{
public:

   /**
    * Initializes generator to build a binary file located at «destdir» based on an official
    * «language» given as two letter code (en, fr, or de) of which file is located at «sourcedir».
    */
   LangFileGenerator(const std::string& language, const std::string& extralang,
                     const std::string& sourcedir, const std::string& destdir);

   /**
    * Release resources used by the map that associates a hash key with the second official language
    * records.
    */
   ~LangFileGenerator();

   /**
    * Creates a new binary file in «language» given as two letter code (es, ru, it, br, tr, etc).
    *
    * A file called "db_lang.tmp" must be in the directory given to the constructor.
    */
   Util::Error generate(const std::string& language);

private:

   typedef std::set<unsigned int> DataOffset;
   
   /**
    * Reads the main binary lang file.
    */
   bool readLangFile(const std::string& file);

   /**
    * Reads the second binary lang file.
    */
   bool readExtraLangFile(const std::string& file);
   
   /**
    * Reads a translation file generated by Rocinante from its database.
    *
    * The file structure is the following one:
    * {{tableid,seqid,stringid}}
    * Translated text.
    *
    * Example:
    *
    * {{0x7c7c1e,0,968}}
    * Usando…
    *
    * {{0x7c7c1e,0,974}}
    * Abriendo el saco…
    *
    * ...
    */
   bool readTranslationFile(const std::string& file);

   /**
    * Creates a 64-bit hash key for «record».
    */
   unsigned long long createKey(const Record& record) const;

private:
   
   /**
    * The official language (two letter code).
    */
   std::string theOfficialLanguage;

   /**
    * The other official language (two letter code).
    */
   std::string theExtraLanguage;
   
   /**
    * The target language (two letter code).
    */
   std::string theTargetLanguage;

   /**
    * The directory where ESO files are.
    */
   std::string theSourceDir;

   /**
    * The directory where file will be generated.
    */
   std::string theDestDir;

   /**
    * The header ID of a lang file.
    */
   unsigned int theHeaderID;

   /**
    * The number of records stored in an official lang file.
    */
   unsigned int theRecordCount;

   /**
    * The vector that contains all the records from an official lang file.
    */
   std::vector<LangUnit> theBasis;
   
   /**
    * The map that associates a file offset with those records of which strings are located in that
    * offset. It is used to avoid duplicates.
    */
   std::multimap<unsigned int, LangUnit> theOffsets;
   using UnitIterator = std::multimap<unsigned int, LangUnit>::iterator;

   /**
    * The map that associates a hash key with the second official language records. The hash key is
    * calculated from the three record identifiers: table, string, and sequence.
    */
   std::unordered_map<unsigned long long, LangUnit*> theExtraLang;
   using OffsetIteratorPtr = std::unordered_map<unsigned long long, LangUnit*>::iterator;
   
   /**
    * The map that associates a hash key with translated records. The hash key is calculated from
    * the three record identifiers: table, string, and sequence.
    */
   std::unordered_map<unsigned long long, LangUnit> theTranslation;
   using OffsetIterator = std::unordered_map<unsigned long long, LangUnit>::iterator;
};

#endif
